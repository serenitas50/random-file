#! /usr/bin/python3
# -*- coding: utf-8 -*-

"""
Return the name of a randomly selected file in a directory.

Usage:
  rndfile [options] [DIRECTORY]
  rndfile -h | --help
  rndfile -v | --version

Arguments:
  DIRECTORY           Directory from which to select [default: .].

Options:
  -h, --help          Show this screen.
  -v, --version       Show version.
  -f, --full          Return full pathname of selected file.
  -a, --all           Allow selection of dot (hidden) files.
  -p P, --pattern P   Comma separated list of filename pattern(s) 
                      to restrict the selection (joined with nonexclusive OR).

"""
# Version 0.2 

import fnmatch
import os
import os.path
import random
import sys
from docopt import docopt


def rndFile( directory='.', patterns=[], fullname=False, dots=False ):
    '''Returns the name of a randomly chosen file in a directory.

Argument "directory" is the directory where the candidate files are
(default is current). Argument "patterns" is a list of filename
patterns. The file is chosen among the set of files matching at least
one of the filename patterns.

If argument "fullname" is False, only the name of the file is returned
(without the path). Otherwise, the full path is returned.

If argument "dots" is False, dot files are excluded from the choice.
Otherwise, they are included.

If the directory is empty or no files match, None is returned.

    '''

    if not directory.endswith( '/' ):
        directory += '/'

    # Throw out dirs:
    try:
        files = [f for f in os.listdir( directory ) 
                 if os.path.isfile( directory + f )]
    except OSError as err:
        print( "OS error: {0}".format( err ) )
        os.sys.exit( 1 )

    # Throw out dot files (depending on option 'dots'):
    if not dots:
        files = [f for f in files if not f.startswith( '.' )]

    # Any files left?
    if files == []:
        return None
    
    # Gather candidate files:
    if patterns == []:
        candidates = files
    else:
        candidates = []
        for p in patterns:
            candidates.extend( fnmatch.filter( files, p ) )

    # Any files left?
    if candidates == []:
        return None
    else:
        # Yes, there are still candidate files.
        # There may be duplicates. Eliminate them:
        candidates = list( set( candidates ) )
        n = len( candidates )
        # Choose a file randomly and return its name:
        if fullname:
            return directory + candidates[random.randrange( n )]
        else:
            return candidates[random.randrange( n )]


if __name__ == '__main__':

    arguments = docopt(
        __doc__, 
        version='rndfile v0.2\thttp://github.com/serenitas50/random-file'
    )
    
    if arguments['DIRECTORY'] is None:
        arguments['DIRECTORY'] = '.'
        
    if arguments['--pattern'] is None:
        patternLst = []
    else:
        patternLst = arguments['--pattern'].split( ',' )
        patternLst = [ p.strip() for p in patternLst ]
    
    # Call function and print result:
    print( 
        rndFile( 
            arguments['DIRECTORY'], 
            patterns=patternLst, 
            fullname=arguments['--full'],
            dots=arguments['--all']
        )
    )
